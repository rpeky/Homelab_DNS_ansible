- name: Install and configure Bind9 DNS server
  hosts: dns_authoritative
  become: true
  gather_facts: true

  vars:
    # SAFETY defaults (override in inventory/group_vars as you already do)
    bind9_packages: [bind9, bind9-utils]
    bind9_recursion: false
    bind9_allow_query: ["127.0.0.1", "10.10.0.0/16"]
    bind9_listen_ipv4: []         # e.g. ["10.10.50.110","10.10.50.111"]
    bind9_listen_ipv6: []

    # TSIG / paths
    bind9_master_host: dnsa01
    bind9_master_ip: 10.10.50.110
    bind9_slave_ips: [10.10.50.111]

    bind9_tsig_key_name: peky-xfr-key
    bind9_tsig_algo: hmac-sha256
    bind9_keys_dir: /etc/bind/keys
    bind9_keys_file: "{{ bind9_keys_dir }}/{{ bind9_tsig_key_name }}.key"
    bind9_keys_conf: /etc/bind/keys.conf

  pre_tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 1800

  tasks:
    - name: Backup current resolv.conf
      ansible.builtin.copy:
        src: /etc/resolv.conf
        dest: /etc/resolv.conf.backup
        remote_src: true
        backup: true

    - name: Temporarily use usable resolvers
      ansible.builtin.copy:
        dest: /etc/resolv.conf
        content: |
          nameserver 10.10.50.100
          nameserver 10.10.50.101
        owner: root
        group: root
        mode: '0644'

    - name: Install Bind9
      ansible.builtin.apt:
        name: "{{ bind9_packages }}"
        state: present
        update_cache: true
        lock_timeout: 300

    - name: Ensure bind9 service directories exist (with correct ownership)
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: "/etc/bind",        owner: "root", group: "bind", mode: "0750" }   # read access for group
        - { path: "/var/cache/bind",  owner: "bind", group: "bind", mode: "0775" }   # writable by named
        - { path: "/var/log/bind",    owner: "root", group: "bind", mode: "0755" }   # or bind:bind if you log here
        - { path: "/etc/bind/keys",   owner: "root", group: "bind", mode: "0750" }   # traverse for group bind


    - name: Deploy named.conf.options (authoritative profile)
      ansible.builtin.copy:
        dest: /etc/bind/named.conf.options
        owner: root
        group: bind
        mode: "0644"
        content: |
          options {
              directory "/var/cache/bind";

              {% if bind9_listen_ipv4 | default([]) | length > 0 -%}
              listen-on { {{ bind9_listen_ipv4 | join('; ') }}; };
              {%- else -%}
              listen-on { any; };
              {%- endif %}

              {% if bind9_listen_ipv6 | default([]) | length > 0 -%}
              listen-on-v6 { {{ bind9_listen_ipv6 | join('; ') }}; };
              {%- else -%}
              listen-on-v6 { none; };
              {%- endif %}

              allow-query { {{ bind9_allow_query | join('; ') }}; };

              recursion {{ 'yes' if bind9_recursion | bool else 'no' }};

              dnssec-validation auto;
              auth-nxdomain no;
              minimal-responses yes;
          };
      notify: restart bind9

    # ---------- TSIG + master/slave wiring ----------

    - name: Ensure BIND keys directory exists
      ansible.builtin.file:
        path: "{{ bind9_keys_dir }}"
        state: directory
        owner: root
        group: bind
        mode: "0750"

    # Generate on master once
    - name: Generate TSIG key on master if missing
      ansible.builtin.shell: |
        set -euo pipefail
        tsig-keygen -a {{ bind9_tsig_algo }} {{ bind9_tsig_key_name }} > "{{ bind9_keys_file }}"
        chown root:bind "{{ bind9_keys_file }}"
        chmod 0640 "{{ bind9_keys_file }}"
      args:
        creates: "{{ bind9_keys_file }}"
      when: inventory_hostname == bind9_master_host
      notify: restart bind9

    # Fetch from master
    - name: Slurp TSIG key file from master
      ansible.builtin.slurp:
        src: "{{ bind9_keys_file }}"
      register: _tsig_file
      delegate_to: "{{ bind9_master_host }}"
      run_once: true

    # Distribute same key file to all BIND nodes
    - name: Deploy TSIG key file to all nodes
      ansible.builtin.copy:
        dest: "{{ bind9_keys_file }}"
        content: "{{ _tsig_file.content | b64decode }}"
        owner: root
        group: bind
        mode: "0640"
      notify: restart bind9

    # Remove stale include of keys.conf (from earlier approach)
    - name: Remove obsolete keys.conf include if present
      ansible.builtin.lineinfile:
        path: /etc/bind/named.conf
        regexp: '^\s*include\s+"/etc/bind/keys\.conf";\s*$'
        state: absent
      notify: restart bind9

    # Ensure TSIG key file include appears BEFORE named.conf.local (so key is defined before use)
    - name: Ensure TSIG key file is included before named.conf.local
      ansible.builtin.lineinfile:
        path: /etc/bind/named.conf
        regexp: '^\s*include\s+"{{ bind9_keys_file | regex_escape }}";\s*$'
        line: 'include "{{ bind9_keys_file }}";'
        insertafter: '^include\s+"/etc/bind/named\.conf\.options";'
        state: present
      notify: restart bind9

    # (Re)build named.conf.local (TSIG-aware master/slave)
    - name: Build named.conf.local (master/slave + TSIG)
      ansible.builtin.template:
        src: templates/named.conf.local.j2
        dest: /etc/bind/named.conf.local
        owner: root
        group: bind
        mode: "0644"
      notify: restart bind9

    # ---------- Zone files (master only) ----------

    - name: Create zone files (master only)
      ansible.builtin.template:
        src: templates/zone.db.j2
        dest: "/etc/bind/{{ item.file }}"
        owner: root
        group: bind
        mode: "0644"
      loop: "{{ bind9_zones }}"
      loop_control:
        label: "{{ item.name }}"
      when: bind9_role == 'master'
      notify: restart bind9

    - name: Create reverse zone files (master only)
      when: bind9_role == 'master' and (bind9_reverse_zones | default([])) | length > 0
      ansible.builtin.template:
        src: templates/zone.db.j2
        dest: "/etc/bind/{{ item.file }}"
        owner: root
        group: bind
        mode: "0644"
      loop: "{{ bind9_reverse_zones | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      notify: restart bind9

    # ---------- Validation + service ----------

    # Validate full config (prints first error to stdout)
    - name: Validate named.conf (full parse)
      ansible.builtin.command: named-checkconf -z /etc/bind/named.conf
      register: check_named
      changed_when: false
      failed_when: check_named.rc != 0

    - name: Validate forward zones (master only)
      ansible.builtin.command: "named-checkzone {{ item.name }} /etc/bind/{{ item.file }}"
      loop: "{{ bind9_zones }}"
      when: bind9_role == 'master'
      register: check_zones
      changed_when: false
      failed_when: check_zones.rc is defined and check_zones.rc != 0

    - name: Enable and start bind9
      ansible.builtin.service:
        name: bind9
        enabled: true
        state: started

    - name: Point resolv.conf back to localhost
      ansible.builtin.copy:
        dest: /etc/resolv.conf
        content: |
          nameserver 127.0.0.1
        owner: root
        group: root
        mode: '0644'

  handlers:
    - name: restart bind9
      ansible.builtin.service:
        name: bind9
        state: restarted

